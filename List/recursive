    let cata =
            λ(b : Type)
          → λ(alg : ../algebra  (../XNor/type  a) b)
          → λ(fa : List a)
          → List/fold
            a
            fa
            b
            (   λ(x : a)
              → λ(y : b)
              → alg < Both = { head = x, tail = y } | Neither : {} >
            )
            (alg < Neither = {=} | Both : { head : a, tail : b } >)

in  let embed =
            λ(fa : ../XNor/type  a (List a))
          → merge
            { Both    = λ(q : { head : a, tail : List a }) → [ q.head ] # q.tail
            , Neither = λ(q : {}) → [] : List a
            }
            fa

in    λ(a : Type)
    → (   { cata    = cata
          , embed   = embed
          , project =
              ../lambek  (List a) (../XNor/type  a) cata embed (../XNor/functor  a)
          }
        : ../recursive  (List a) (../XNor/type  a)
      )
